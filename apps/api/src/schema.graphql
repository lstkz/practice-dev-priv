scalar Void

type Subscription {
  mock: String!
}

type Query {
  me: User!
  ping: Float!
  getMyProfile: MyProfile!
  getAvatarUploadUrl: PresignedPost!
  getNotificationSettings: NotificationSettings!
  getAwsUploadContentAuth: AwsUploadContentAuth!
  getWorkspaceS3Auth(workspaceId: String!): WorkspaceS3Auth!
  getChallenge(id: String!): Challenge!
}

type Mutation {
  login(values: LoginInput!): AuthResult!
  register(values: RegisterInput!): AuthResult!
  loginGithub(code: String!): AuthResult!
  loginGoogle(accessToken: String!): AuthResult!
  registerGithub(code: String!): AuthResult!
  registerGoogle(accessToken: String!): AuthResult!
  confirmEmail(code: String!): AuthResult!
  logout: Void
  resetPassword(usernameOrEmail: String!): Void
  confirmResetPassword(code: String!, newPassword: String!): AuthResult!
  updateMyProfile(values: UpdateProfileInput!): MyProfile!
  completeAvatarUpload: AvatarUploadResult!
  deleteAvatar: Void
  changeUsername(username: String!): Void
  changeEmail(email: String!): OkResult!
  confirmChangeEmail(code: String!): Void
  changePassword(password: String!): Void
  updateNotificationSettings(
    values: NotificationSettingsInput!
  ): NotificationSettings
  resendVerificationCode: Void
  updateModule(values: UpdateModuleInput!): Void
  updateChallenge(values: UpdateChallengeInput!): Void
  getOrCreateWorkspace(values: CreateWorkspaceInput!): Workspace!
  createWorkspaceNode(values: CreateWorkspaceNodeInput!): Void
  updateWorkspaceNode(values: UpdateWorkspaceNodeInput!): Void
  deleteWorkspaceNode(id: String!): Void
}

input UpdateWorkspaceNodeInput {
  id: String!
  name: String
  parentId: String
  hash: String
}

input CreateWorkspaceNodeInput {
  id: String!
  workspaceId: String!
  name: String!
  parentId: String
  hash: String!
  type: WorkspaceNodeType!
}

type Challenge {
  challengeId: Int!
  moduleId: Int!
  title: String!
  description: String!
  difficulty: String!
  practiceTime: Float!
  detailsS3Key: String!
  htmlS3Key: String!
  solutionUrl: String!
}

type Workspace {
  id: String!
  isReady: Boolean!
  items: [WorkspaceNode!]!
  s3Auth: WorkspaceS3Auth!
  libraries: [LibraryDefinition!]!
}

type LibraryDefinition {
  name: String!
  types: String!
  source: String!
}

enum WorkspaceNodeType {
  file
  directory
}

type WorkspaceNode {
  id: String!
  name: String!
  parentId: String
  hash: String!
  type: WorkspaceNodeType!
  isLocked: Boolean
}

input CreateWorkspaceInput {
  challengeUniqId: String!
}

type AwsCredentials {
  accessKeyId: String!
  secretAccessKey: String!
  sessionToken: String!
}

type AwsUploadContentAuth {
  bucketName: String!
  credentials: AwsCredentials!
}

type WorkspaceS3Auth {
  bucketName: String!
  credentials: AwsCredentials!
}

input UpdateModuleInput {
  id: Int!
  title: String!
  description: String!
  mainTechnology: String!
  difficulty: String!
  tags: [String!]!
}

input UpdateChallengeInput {
  challengeId: Int!
  moduleId: Int!
  title: String!
  description: String!
  difficulty: String!
  practiceTime: Int!
  detailsS3Key: String!
  htmlS3Key: String!
  solutionUrl: String!
  files: [ChallengeFileInput!]!
  libraries: [LibraryInput!]!
}

input LibraryInput {
  name: String!
  types: String!
  source: String!
}

input ChallengeFileInput {
  name: String!
  directory: String!
  s3Key: String!
  isLocked: Boolean
}

type NotificationSettings {
  newsletter: Boolean!
}

input NotificationSettingsInput {
  newsletter: Boolean!
}

type OkResult {
  ok: Boolean!
}

type AvatarUploadResult {
  avatarId: String!
}

type PresignedPostField {
  name: String!
  value: String!
}

type PresignedPost {
  url: String!
  fields: [PresignedPostField!]!
}

type AuthResult {
  token: String!
  user: User!
}

type MyProfile {
  name: String
  about: String
  country: String
  url: String
}

type User {
  id: String!
  username: String!
  email: String!
  avatarId: String
  isAdmin: Boolean
  isVerified: Boolean!
}

input UpdateProfileInput {
  name: String
  about: String
  country: String
  url: String
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

input LoginInput {
  usernameOrEmail: String!
  password: String!
}
