scalar Void

type Query {
  me: User!
  ping: Float!
  getMyProfile: MyProfile!
  getAvatarUploadUrl: PresignedPost!
  getNotificationSettings: NotificationSettings!
}

type Mutation {
  login(values: LoginInput!): AuthResult!
  register(values: RegisterInput!): AuthResult!
  loginGithub(code: String!): AuthResult!
  loginGoogle(accessToken: String!): AuthResult!
  registerGithub(code: String!): AuthResult!
  registerGoogle(accessToken: String!): AuthResult!
  confirmEmail(code: String!): AuthResult!
  logout: Void
  resetPassword(usernameOrEmail: String!): Void
  confirmResetPassword(code: String!, newPassword: String!): AuthResult!
  updateMyProfile(values: UpdateProfileInput!): MyProfile!
  completeAvatarUpload: AvatarUploadResult!
  deleteAvatar: Void
  changeUsername(username: String!): Void
  changeEmail(email: String!): OkResult!
  confirmChangeEmail(code: String!): Void
  changePassword(password: String!): Void
  updateNotificationSettings(
    values: NotificationSettingsInput!
  ): NotificationSettings
}

type Subscription {
  mock: String!
}

type NotificationSettings {
  newsletter: Boolean!
}

input NotificationSettingsInput {
  newsletter: Boolean!
}

type OkResult {
  ok: Boolean!
}

type AvatarUploadResult {
  avatarId: String!
}

type PresignedPostField {
  name: String!
  value: String!
}

type PresignedPost {
  url: String!
  fields: [PresignedPostField!]!
}

type AuthResult {
  token: String!
  user: User!
}

type MyProfile {
  name: String
  about: String
  country: String
  url: String
}

type User {
  id: String!
  username: String!
  email: String!
  isAdmin: Boolean
  isVerified: Boolean!
}

input UpdateProfileInput {
  name: String
  about: String
  country: String
  url: String
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

input LoginInput {
  usernameOrEmail: String!
  password: String!
}
